# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:/design.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import Qt

from PyQt5.QtWidgets import QWidget, QLabel, QGridLayout, QFileDialog

import ImagesWork
import os

from ImageWindow import ImageWindow


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setFixedSize(800, 600)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(30, 30, 655, 450))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 439, 439))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        self.button_firstPage = QtWidgets.QPushButton(self.centralwidget)
        self.button_firstPage.setGeometry(QtCore.QRect(80, 480, 41, 23))
        self.button_firstPage.setObjectName("button_firstPage")

        self.button_PrevPage = QtWidgets.QPushButton(self.centralwidget)
        self.button_PrevPage.setGeometry(QtCore.QRect(130, 480, 75, 23))
        self.button_PrevPage.setObjectName("button_PrevPage")

        self.label_pageCount = QtWidgets.QLabel(self.centralwidget)
        self.label_pageCount.setGeometry(QtCore.QRect(210, 480, 75, 21))
        self.label_pageCount.setAlignment(QtCore.Qt.AlignCenter)
        self.label_pageCount.setObjectName("label_pageCount")

        self.label_directory = QtWidgets.QLabel('directory', self.centralwidget)
        self.label_directory.setGeometry(QtCore.QRect(30, 3, 600, 30))
        self.label_directory.setObjectName("label_directory")

        self.button_nextPage = QtWidgets.QPushButton(self.centralwidget)
        self.button_nextPage.setGeometry(QtCore.QRect(280, 480, 75, 23))
        self.button_nextPage.setObjectName("button_nextPage")
        self.button_lastPage = QtWidgets.QPushButton(self.centralwidget)
        self.button_lastPage.setGeometry(QtCore.QRect(360, 480, 41, 23))
        self.button_lastPage.setObjectName("button_lastPage")
        self.button_loadImages = QtWidgets.QPushButton(self.centralwidget)
        self.button_loadImages.setGeometry(QtCore.QRect(190, 510, 75, 23))
        self.button_loadImages.setObjectName("button_loadImages")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 532, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.button_firstPage.setText(_translate("MainWindow", "<<"))
        self.button_PrevPage.setText(_translate("MainWindow", "<"))
        self.label_pageCount.setText(_translate("MainWindow", "0"))
        self.button_nextPage.setText(_translate("MainWindow", ">"))
        self.button_lastPage.setText(_translate("MainWindow", ">>"))
        self.button_loadImages.setText(_translate("MainWindow", "Load Images"))

    def functionaliti(self, MainWindow):
        self.image_layout = QGridLayout()
        self.image_container = QWidget()
        self.image_container.setLayout(self.image_layout)
        self.scrollArea.setWidget(self.image_container)

        self.images = []
        self.current_page = 0
        self.images_per_page = 50
        self.folder = ''

        self.button_firstPage.clicked.connect(self.show_first_page)
        self.button_PrevPage.clicked.connect(self.show_previous_page)
        self.button_nextPage.clicked.connect(self.show_next_page)
        self.button_lastPage.clicked.connect(self.show_last_page)
        self.button_loadImages.clicked.connect(self.load_images)

    def load_images(self, current=0):
        #folder = 'D:/Рабочий стол/train/images'
        if self.folder == '':
            self.folder = QFileDialog.getExistingDirectory(self, "Select Directory")

        if self.folder:
            self.images = [os.path.join(self.folder, f) for f in os.listdir(self.folder) if
                           f.lower().endswith(('.jpg', '.png', '.jpeg'))]
            self.current_page = current
            self.update_image_preview()
            self.label_directory.setText(self.folder)


    def update_image_preview(self):
        self.clear_image_layout()
        self.image_layout.itemAt(0).widget().deleteLater() if self.image_layout.count() > 0 else None
        start_index = self.current_page * self.images_per_page
        end_index = start_index + self.images_per_page
        current_images = self.images[start_index:end_index]

        index = 0
        for img_path in current_images:
            label = QLabel()
            # pixmap = QPixmap(img_path)
            pixmap = ImagesWork.load_image(img_path)
            label.setPixmap(pixmap.scaled(200, 200, Qt.KeepAspectRatio))

            label.mousePressEvent = lambda event, path=img_path: self.open_image(path)

            row = index // 3
            col = index % 3
            index += 1

            self.image_layout.addWidget(label, row, col)

        total_images = len(self.images)
        self.label_pageCount.setText(f"{self.current_page + 1} / {round(total_images / self.images_per_page)}")


    def open_image(self, image_path):
        image_window = ImageWindow(image_path)
        image_window.exec_()
        self.load_images(current=self.current_page)

    def show_first_page(self):
        if self.images:
            self.current_page = 0
            self.update_image_preview()

    def show_previous_page(self):
        if self.images and self.current_page > 0:
            self.current_page -= 1
            self.update_image_preview()

    def show_next_page(self):
        if self.images and (self.current_page + 1) * self.images_per_page < len(self.images):
            self.current_page += 1
            self.update_image_preview()

    def show_last_page(self):
        if self.images:
            total_pages = (len(self.images) + self.images_per_page - 1) // self.images_per_page
            self.current_page = total_pages - 1
            self.update_image_preview()

    def clear_image_layout(self):
        for i in reversed(range(self.image_layout.count())):
            widget = self.image_layout.itemAt(i).widget()
            if widget is not None:
                widget.deleteLater()
        self.image_layout.update()